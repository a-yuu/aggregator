services:
  # SERVICE 1: Event Aggregator
  aggregator:
    build: .
    ports:
      - "8081:8080"          # Host 8081 → Container 8080 (karena 8080 sudah dipakai lokal)
    networks:
      - event-network         # Menghubungkan dengan publisher lewat jaringan internal
    volumes:
      - dedup-data:/app/data  # Menyimpan data dedup secara persisten (tidak hilang setelah restart)
    environment:
      - LOG_LEVEL=INFO        # Mengatur level log (INFO agar tidak terlalu verbose)
    healthcheck:
      # Healthcheck memastikan container aggregator siap sebelum publisher dijalankan
      test: ["CMD", "curl", "-f", "http://localhost:8080/health"]
      interval: 10s           # Pemeriksaan setiap 10 detik
      timeout: 3s             # Timeout maksimal 3 detik
      retries: 3              # Gagal 3x berturut-turut → dianggap tidak sehat

  # SERVICE 2: Event Publisher
  publisher:
    build: .                  # Menggunakan image dari Dockerfile yang sama
    command: python -m src.publisher  # Menjalankan modul publisher simulator
    depends_on:
      aggregator:
        condition: service_healthy   # Hanya mulai setelah aggregator lulus healthcheck
    environment:
      - AGGREGATOR_URL=http://aggregator:8080  # URL internal antar-container (bukan localhost)
      - NUM_EVENTS=5000                        # Jumlah event yang dikirim selama simulasi
      - DUPLICATE_RATE=0.2                     # 20% event duplikat untuk menguji deduplication
    networks:
      - event-network
    

# Network definition (bridge → default untuk komunikasi antar-container)
networks:
  event-network:
    driver: bridge

# Volume untuk menyimpan data dedup secara persisten di host
volumes:
  dedup-data: